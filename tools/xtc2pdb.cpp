/**
 * \file  xtc2pdb.cpp
 * \brief Tool for converting .xtc files to .pdb format.
 *
 * FDC: FuDePAN Distributed Clusterer
 * <http://fud.googlecode.com/>
 * Copyright (C) 2009 Guillermo Biset, FuDePAN
 *
 * This file is part of the FuD project.
 *
 * Contents:       Tool for converting .xtc file to gnuplot command file.
 *
 *
 * System:         FDC
 * Language:       C++
 *
 * Author:         Guillermo Biset
 * E-Mail:         billybiset AT gmail.com
 *
 * FDC is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * FDC is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with FuD.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#include <iostream>
#include <fstream>
#include <cstring>

extern "C"
{
    #include "xdrfile.h"
    #include "xdrfile_xtc.h"
}

#include "getopt_pp.h"

using namespace GetOpt;


void imprime(FILE *filew, ATOM *patm, int Nres, int Mod)
{
 int i,j;
 j=0;
 fprintf(filew,"MODEL    %5i\n",Mod);
 for (i=1;i<=Nres;i++) {
   j++;
   fprintf(filew,"ATOM  %5i  N   ALA   %3i    %8.3f%8.3f%8.3f\n",j,i,patm[j].x,patm[j].y,patm[j].z);
   j++;
   fprintf(filew,"ATOM  %5i  CA  ALA   %3i    %8.3f%8.3f%8.3f\n",j,i,patm[j].x,patm[j].y,patm[j].z);
   j++;
   fprintf(filew,"ATOM  %5i  C   ALA   %3i    %8.3f%8.3f%8.3f\n",j,i,patm[j].x,patm[j].y,patm[j].z);
 }
 fprintf(filew,"ENDMDL\n");
}

void show_help()
{
    std::cout << "xtc2pbd generates a .pdb file from an .xtc one.\n"
        "\t Example: xtc2pdb -i input.xtc -o output.pdb\n\n"
        "Valid options are:\n"
        "\t-i --input                  Input .xtc file.\n"
        "\t-o --output                 Output .pdb file.\n"
        "\t-h --help                   Show this help and exits.\n\n"
    ;
}

void output(int atoms, std::string input, std::string output_file)
{
    std::ofstream file;
    file.open( output_file.c_str() );

    std::vector<rvec*> proteins;

    bool _finished_reading(false);

    while (!_finished_reading)
    {
        rvec   *_atoms_vector =  new rvec[atoms];
        int    step;
        float  time;
        matrix box;
        float  prec;


        result = read_xtc(xdrfile,atoms,&step,&time,box,_atoms_vector,&prec);

        if (exdrENDOFFILE == result)
            _finished_reading = true;
        else if (exdrOK != result)
        {
            std::cerr << "ERROR: read_xtc " << result << std::endl;
            _finished_reading = true;
        }
        else
            proteins.push_back(_atoms_vector);
    }

    //output to file
    for (size_t protein(0); protein < proteins.size(); ++protein);
    {
        file << "REMARK    Generated by xtc2pdb\n"
             << "TITLE     t=0.000 t= 0.00000\n"
             << "MODEL        " << protein << std::endl;

        int atom;
        atom = 1;
        while (atom <= atoms)
        {
            file << "ATOM " << std::setw(5) << atom << " N   ALA A " << std::setw(5) << atom % 3
                 << std::setw(8) << proteins[protein][atom-1][0] << ' '
                 << std::setw(8) << proteins[protein][atom-1][1] << ' '
                 << std::setw(8) << proteins[protein][atom-1][2] << " 1.00 0.00\n";

            ++atom;

            file << "ATOM " << std::setw(5) << atom << " CA  ALA A " << std::setw(5) << atom % 3
                 << std::setw(8) << proteins[protein][atom-1][0] << ' '
                 << std::setw(8) << proteins[protein][atom-1][1] << ' '
                 << std::setw(8) << proteins[protein][atom-1][2] << " 1.00 0.00\n";

            ++atom;

            file << "ATOM " << std::setw(5) << atom << " C   ALA A " << std::setw(5) << atom % 3
                 << std::setw(8) << proteins[protein][atom-1][0] << ' '
                 << std::setw(8) << proteins[protein][atom-1][1] << ' '
                 << std::setw(8) << proteins[protein][atom-1][2] << " 1.00 0.00\n";

            ++atom;
        }

        size_t column(1);
        size_t color(1);

        for (size_t protein(0); protein < proteins.size(); ++protein)
        {
            if (protein == 0)
            {
                file << "splot \"" << output_file << ".dat\" using 1:2:3 title \"Frame "<<first + protein <<"\" with lines lw 3 lt 1";

                if (proteins.size() > 1)
                    file << ",\\" << std::endl;
                else
                    file << std::endl;
            }
            else
            {
                if (protein == proteins.size() - 1)
                    file << "\"" << output_file << ".dat\" using " << column <<':' << column+1 << ':' << column+2 << " title \"Frame "<<first + protein<<"\" with lines lw 3 lt " << color  << std::endl;
                else
                    file << "\"" << output_file << ".dat\" using " << column <<':' << column+1 << ':' << column+2 << " title \"Frame "<<first + protein<<"\" with lines lw 3 lt " << color << ",\\" << std::endl;
            }

            column += 3;
            ++color;
        }

        file << "pause -1" << std::endl;

        file.close();
    }
}


int main(int argc, char *argv[])
{
    GetOpt_pp options(argc,argv);

    if (! (options >> OptionPresent('i',"input")) || ! (options >> OptionPresent('o',"output")) )
        show_help();
    else
    {
        std::string output_file;
        std::string input;

        size_t first(0);
        size_t total(0);

        options >> Option('i',"input",input) >> Option('o',"output",output_file)
                >> Option('f',"first",first) >> Option('t',"total",total);

        int atoms;
        int result;

        // You can't always get what you want...
        std::string str(input);
        char *fname = new char[str.size() + 1];
        strcpy(fname,str.c_str());
        // ...(RS)

        result = read_xtc_natoms(fname,&atoms);

        if (exdrOK != result)
            std::cerr <<"Error initializing database. Wrong filename?\n";


        output(atoms,input,output_file);
    }
}